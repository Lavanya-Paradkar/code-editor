{"version":3,"sources":["Editor.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","language","value","onCodeChange","className","onClick","e","preventDefault","codeToSend","title","Axios","post","then","response","console","log","alert","catch","error","message","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","App","htmlfileReader","cssfileReader","jsfileReader","useState","html","setHtml","css","javascript","viewCode","handleFileReadHtml","content","result","handleFileReadCss","handleFileReadJs","type","id","accept","onChange","file","target","files","FileReader","onloadend","readAsText","for","srcDoc","sandbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39eddbf5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/mode/xml/xml';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/mode/css/css';\r\nimport { Controlled } from 'react-codemirror2';\r\nimport Axios from 'axios';\r\n\r\nfunction Editor({ language, value, onCodeChange }) {\r\n\r\n    function handleCodeChange(editor, data, value){\r\n        onCodeChange(value);\r\n    }\r\n\r\n    const share = e =>{\r\n        \r\n        e.preventDefault();\r\n        \r\n        const codeToSend = { title: value };\r\n        Axios.post('https://reqres.in/api/values', codeToSend) // The api can be set as per preference.\r\n            .then((response) => {\r\n                console.log(response);\r\n                alert(\"Your Code has been successfully sent.\")\r\n            })\r\n            .catch(error => {\r\n                alert(error.message);\r\n            });\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"editor\">\r\n            <div className=\"editor__heading\">\r\n                <h2>Code Editor</h2>\r\n                <button onClick={share}>Share</button>\r\n            </div> \r\n            <Controlled\r\n                onBeforeChange = {handleCodeChange}\r\n                value = {value}\r\n                className = \"code-editor-style\"\r\n                options = {{\r\n                    lineWrapping: true,\r\n                    lint: true,\r\n                    mode: language,\r\n                    theme: 'material',\r\n                    lineNumbers: true,\r\n\r\n                }}\r\n\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Editor\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { useState } from 'react';\nimport './App.css';\nimport Editor from './Editor';\n\nfunction App() {\n\n  const [html, setHtml] = useState('');\n  const [css, setCss] = useState('');\n  const [javascript, setJavascript] = useState('');\n  \n\n  const viewCode = `\n    <html>\n      <body>${html}</body>\n      <style>${css}</style>\n      <script>${javascript}</script>\n    </html>\n\n  `\n\n\n  let htmlfileReader;\n  let cssfileReader;\n  let jsfileReader;\n\n  //HTML\n\n  const handleFileReadHtml = (e) => {\n  const content = htmlfileReader.result;\n  console.log(content);\n  setHtml(content);\n  \n\n  };\n  \n  const handleFileChosenHtml = (file) => {\n    htmlfileReader = new FileReader();\n    htmlfileReader.onloadend = handleFileReadHtml;\n    htmlfileReader.readAsText(file);\n  };\n\n  //CSS\n\n  const handleFileReadCss = (e) => {\n    const content = cssfileReader.result;\n    console.log(content);\n    setHtml(content);\n    \n  \n    };\n    \n    const handleFileChosenCss = (file) => {\n      cssfileReader = new FileReader();\n      cssfileReader.onloadend = handleFileReadCss;\n      cssfileReader.readAsText(file);\n    };\n\n    //JS\n\n    const handleFileReadJs = (e) => {\n      const content = jsfileReader.result;\n      console.log(content);\n      setHtml(content);\n      \n    \n      };\n      \n      const handleFileChosenJs = (file) => {\n        jsfileReader = new FileReader();\n        jsfileReader.onloadend = handleFileReadJs;\n        jsfileReader.readAsText(file);\n      };\n\n  \n  \n\n  return (\n\n    <div className=\"app\">\n\n      <div className=\"app__heading\">\n        <h1>Code N View</h1>\n      </div>\n\n      <div className=\"app__top\">\n\n        <div className=\"app__fileSection\">\n\n          <h2>File Explorer</h2>\n\n          <div className=\"app__file\">\n\n            <div className = \"file__html\">\n                <input \n                    type='file'\n                    id='fileHtml'\n                    className='inputfileHtml'\n                    accept='.html'\n                    onChange={e => handleFileChosenHtml(e.target.files[0])}\n                />\n\n                <label for=\"fileHtml\">Select HTML file</label>\n            </div>\n\n            <div className = \"file__css\">\n                <input \n                    type='file'\n                    id='fileCss'\n                    className='inputfileCss'\n                    accept='.css'\n                    onChange={e => handleFileChosenCss(e.target.files[0])}\n                />\n\n                <label for=\"fileCss\">Select CSS file</label>\n            </div>\n\n            <div className = \"file__js\">\n                <input \n                    type='file'\n                    id='fileJs'\n                    className='inputfileJs'\n                    accept='.js'\n                    onChange={e => handleFileChosenJs(e.target.files[0])}\n                />\n\n                <label for=\"fileJs\">Select JS file</label>\n            </div>\n\n          </div>\n          \n        </div>  \n        \n        <Editor language=\"xml\" value={html} onCodeChange={setHtml}/>\n        \n      </div>\n\n      <div className=\"app__bottom\">\n        <iframe\n          srcDoc={viewCode}\n          title = \"output\"\n          sandbox = \"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n          frameBorder = \"0\"\n          width = \"100%\"\n          height = \"100%\"\n        />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}